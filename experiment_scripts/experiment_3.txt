    """
    Experiment 1
    """
    """
    First configure dataset and split
    """
    # dataset from ["cifar10", "mnist", "synthetic"]
    dataset = "mnist"
    num_clients = 400
    dirichlet_alpha = 0.01
    dataset_alpha = 1
    dataset_beta = 1  # needed for synthetic dataset
    if dataset != "synthetic":
        dataset_alpha = dirichlet_alpha

    dataset_config = {
        "dataset": dataset,
        "num_clients": num_clients,
        "alpha": dataset_alpha,
        "beta": dataset_beta,
    }

    """
    Then configure the algorithm
    """
    algorithm = "fedavg"
    select_fraction = 10 / 400
    E = 10
    B = 10
    T = 400
    lr = 0.01
    momentum = 0.5
    mu = None
    alpha = None
    beta = None
    decay_factor = None

    noise_level = 0

    """
    Perform runs
    """
    num_runs = 5

    noise_levels = [0]
    algorithms = ["fedavg", "fedprox", "ucb", "sfedavg", "poc"]
    # select_fractions = [10 / 400, 30 / 400, 50 / 400, 70 / 400, 90 / 400]
    select_fractions = [10 / 400, 90 / 400]
    # dirichlet_alphas = [1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3]
    dirichlet_alphas = [1e-3, 1e3]

    sfedavg_alphas = [0, 0.25, 0.5, 0.75]
    poc_decay_factors = [1, 0.9]
    fedprox_mus = [0.001, 0.01, 0.1, 1]
    ucb_betas = [0.01, 0.1, 1, 10]

    for select_fraction in select_fractions:
        for dataset_alpha in dirichlet_alphas:
            for algorithm in algorithms:
                if algorithm == "sfedavg":
                    for alpha in sfedavg_alphas:
                        beta = 1 - alpha

                        test_run = AlgoRun(
                            dataset_config,
                            algorithm,
                            select_fraction,
                            E=E,
                            B=B,
                            T=T,
                            lr=lr,
                            momentum=momentum,
                            mu=mu,
                            alpha=alpha,
                            beta=beta,
                            decay_factor=decay_factor,
                            noise_level=noise_level,
                        )
                        avg_runs(num_runs, test_run, logging=True)

                elif algorithm == "fedavg":
                    test_run = AlgoRun(
                        dataset_config,
                        algorithm,
                        select_fraction,
                        E=E,
                        B=B,
                        T=T,
                        lr=lr,
                        momentum=momentum,
                        mu=mu,
                        alpha=alpha,
                        beta=beta,
                        decay_factor=decay_factor,
                        noise_level=noise_level,
                    )
                    avg_runs(num_runs, test_run, logging=True)
                elif algorithm == "poc":
                    for decay_factor in poc_decay_factors:
                        test_run = AlgoRun(
                            dataset_config,
                            algorithm,
                            select_fraction,
                            E=E,
                            B=B,
                            T=T,
                            lr=lr,
                            momentum=momentum,
                            mu=mu,
                            alpha=alpha,
                            beta=beta,
                            decay_factor=decay_factor,
                            noise_level=noise_level,
                        )
                        avg_runs(num_runs, test_run, logging=True)
                elif algorithm == "fedprox":
                    for mu in fedprox_mus:
                        test_run = AlgoRun(
                            dataset_config,
                            algorithm,
                            select_fraction,
                            E=E,
                            B=B,
                            T=T,
                            lr=lr,
                            momentum=momentum,
                            mu=mu,
                            alpha=alpha,
                            beta=beta,
                            decay_factor=decay_factor,
                            noise_level=noise_level,
                        )
                        avg_runs(num_runs, test_run, logging=True)
                elif algorithm == "ucb":
                    for beta in ucb_betas:
                        test_run = AlgoRun(
                            dataset_config,
                            algorithm,
                            select_fraction,
                            E=E,
                            B=B,
                            T=T,
                            lr=lr,
                            momentum=momentum,
                            mu=mu,
                            alpha=alpha,
                            beta=beta,
                            decay_factor=decay_factor,
                            noise_level=noise_level,
                        )
                        avg_runs(num_runs, test_run, logging=True)

    wandb.init(project="FL-AAU-11-7", name="finishing-3")
    wandb.alert(title="finished run 3", text="Finishing mnist hyperparam search")
    wandb.finish()
