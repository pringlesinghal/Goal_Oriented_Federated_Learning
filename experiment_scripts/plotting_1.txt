rootdir = "results-synthetic11"
algorithms = ["ucb", "fedprox", "fedavg", "poc", "sfedavg"]
# select_fractions = [10 / 700, 20 / 700, 30 / 700]
select_fractions = [10 / 700]
num_clients = 700
num_selected_arr = [10, 20, 30]

results_dict = {}
for i in algorithms:
    results_dict[i] = {}
    for j in num_selected_arr:
        results_dict[i][j] = []

sfedavg_alphas = [0, 0.25, 0.5, 0.75]
poc_decay_factors = [1, 0.9]
fedprox_mus = [0.001, 0.01, 0.1, 1]
ucb_betas = [0.01, 0.1, 1, 10]

# for num_selected = 10
sfedavg_alpha = 0.5
poc_decay_factor = 1
fedprox_mu = 1
ucb_beta = 10

for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        file_path = os.path.join(subdir, file)
        with open(file_path, "rb") as f:
            results = pickle.load(f)
            algorithm = results.config["algorithm"]
            select_fraction = results.config["select_fraction"]
            num_selected = int(select_fraction * num_clients)
            flag = False
            if algorithm == "ucb" and results.config["algo_beta"] == ucb_beta:
                flag = True
            elif algorithm == "fedprox" and results.config["mu"] == fedprox_mu:
                flag = True
            elif (
                algorithm == "sfedavg" and results.config["algo_alpha"] == sfedavg_alpha
            ):
                flag = True
            elif (
                algorithm == "poc"
                and results.config["decay_factor"] == poc_decay_factor
            ):
                flag = True
            elif algorithm == "fedavg":
                flag = True

            if num_selected != 10:
                flag = False

            if flag:
                (results_dict[algorithm][num_selected]).append(results)

# # for num_selected = 20
# sfedavg_alpha = 0.5
# poc_decay_factor = 1
# fedprox_mu = 0.1
# ucb_beta = 10

# for subdir, dirs, files in os.walk(rootdir):
#     for file in files:
#         file_path = os.path.join(subdir, file)
#         with open(file_path, "rb") as f:
#             results = pickle.load(f)
#             algorithm = results.config["algorithm"]
#             select_fraction = results.config["select_fraction"]
#             num_selected = int(select_fraction * num_clients)
#             flag = False
#             if algorithm == "ucb" and results.config["algo_beta"] == ucb_beta:
#                 flag = True
#             elif algorithm == "fedprox" and results.config["mu"] == fedprox_mu:
#                 flag = True
#             elif (
#                 algorithm == "sfedavg" and results.config["algo_alpha"] == sfedavg_alpha
#             ):
#                 flag = True
#             elif (
#                 algorithm == "poc"
#                 and results.config["decay_factor"] == poc_decay_factor
#             ):
#                 flag = True
#             elif algorithm == "fedavg":
#                 flag = True

#             if num_selected != 10:
#                 flag = False

#             if flag:
#                 (results_dict[algorithm][num_selected]).append(results)

# # for num_selected = 30
# sfedavg_alpha = 0.5
# poc_decay_factor = 1
# fedprox_mu = 0.1
# ucb_beta = 10

# for subdir, dirs, files in os.walk(rootdir):
#     for file in files:
#         file_path = os.path.join(subdir, file)
#         with open(file_path, "rb") as f:
#             results = pickle.load(f)
#             algorithm = results.config["algorithm"]
#             select_fraction = results.config["select_fraction"]
#             num_selected = int(select_fraction * num_clients)
#             flag = False
#             if algorithm == "ucb" and results.config["algo_beta"] == ucb_beta:
#                 flag = True
#             elif algorithm == "fedprox" and results.config["mu"] == fedprox_mu:
#                 flag = True
#             elif (
#                 algorithm == "sfedavg" and results.config["algo_alpha"] == sfedavg_alpha
#             ):
#                 flag = True
#             elif (
#                 algorithm == "poc"
#                 and results.config["decay_factor"] == poc_decay_factor
#             ):
#                 flag = True
#             elif algorithm == "fedavg":
#                 flag = True

#             if num_selected != 10:
#                 flag = False

#             if flag:
#                 (results_dict[algorithm][num_selected]).append(results)
# f = plt.figure()
# ax = f.add_subplot(111)
for num_selected in num_selected_arr[0:1]:
    for algorithm in algorithms:
        algo_results = results_dict[algorithm][num_selected]
        summary_results = average_results(algo_results)
        if algorithm == "ucb":
            algotext = r"""Fed-Shap-UCB"""
        elif algorithm == "poc":
            algotext = r"""Power-Of-Choice"""
        elif algorithm == "fedavg":
            algotext = r"""FedAvg"""
        elif algorithm == "fedprox":
            algotext = r"FedProx"
        elif algorithm == "sfedavg":
            algotext = r"S-FedAvg"

        plt.plot(summary_results.test_acc, label=algotext)
plt.ylabel("Test Accuracy")
plt.xlabel("Communication Rounds")
# plt.ylim(2, 3)
plt.legend()
# plt.show()  # comment this for .tex generation
# generate .tex
import tikzplotlib

tikzplotlib.save(f"plots/test-acc-{rootdir}.tex")
import matplotlib as mpl

plt.close()
mpl.rcParams.update(mpl.rcParamsDefault)